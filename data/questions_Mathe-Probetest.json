[
  {
    "frage": "1. Welche der folgenden Mengenoperationen liefert alle Elemente, die in mindestens einer der beiden Mengen enthalten sind, aber nicht in beiden?",
    "optionen": [
      "**Schnittmenge** ($A \\cap B$)",
      "**Symmetrische Differenz** ($A \\triangle B$)",
      "**Vereinigung** ($A \\cup B$)",
      "**Differenz** ($A \\setminus B$)"
    ],
    "loesung": 1,
    "erklaerung": "Die **symmetrische **Differenz**** enthält genau die Elemente, die in einer, aber nicht in beiden Mengen sind.",
    "extended_explanation": {
      "title": "Theoretischer Hintergrund: Symmetrische Differenz",
      "content": "Die symmetrische Differenz $A \\triangle B$ ist formal definiert als $(A \\cup B) \\setminus (A \\cap B)$. Sie entspricht der Vereinigung der beiden Differenzmengen $(A \\setminus B) \\cup (B \\setminus A)$.\n\nLogisch ausgedrückt ist es ein **exklusives ODER (XOR)**: Ein Element ist genau dann in der symmetrischen Differenz, wenn es in A oder in B ist, aber nicht in beiden gleichzeitig. Dies ist ein fundamentales Konzept in der Mengenlehre und findet auch in der Informatik, z.B. bei der Berechnung von Unterschieden zwischen Datensätzen, Anwendung."
    },
    "gewichtung": 1,
    "thema": "Formale Sprachen & Mengenlehre"
  },
  {
    "frage": "2. Welcher der folgenden Datentypen in Python ist veränderlich?",
    "optionen": [
      "Tuple",
      "String",
      "List",
      "Integer"
    ],
    "loesung": 2,
    "erklaerung": "Listen (`list`) sind in Python veränderlich (mutable), d.h. ihre Elemente können nach der Erstellung geändert werden. Tupel, Strings und Zahlen sind unveränderlich (immutable).",
    "gewichtung": 1,
    "thema": "Formale Sprachen & Mengenlehre"
  },
  {
    "frage": "3. Welche der folgenden Mengenoperationen ist nicht kommutativ?",
    "optionen": [
      "**Vereinigung** ($A \\cup B$)",
      "**Schnittmenge** ($A \\cap B$)",
      "**Differenz** ($A \\setminus B$)",
      "**Symmetrische Differenz** ($A \\triangle B$)"
    ],
    "loesung": 2,
    "erklaerung": "Die **Differenz** ist nicht kommutativ, da die Reihenfolge der Mengen das Ergebnis ändert: $A \\setminus B$ (Elemente in A, aber nicht in B) ist im Allgemeinen ungleich $B \\setminus A$ (Elemente in B, aber nicht in A).",
    "extended_explanation": {
      "title": "Kommutativität von Mengenoperationen",
      "content": "Eine Operation ist kommutativ, wenn die Reihenfolge der Operanden keine Rolle spielt. \n- **Kommutativ:** Vereinigung ($A \\cup B = B \\cup A$), Schnittmenge ($A \\cap B = B \\cap A$), Symmetrische Differenz ($A \\triangle B = B \\triangle A$).\n- **Nicht kommutativ:** Differenz ($A \\setminus B \\neq B \\setminus A$)."
    },
    "gewichtung": 2,
    "thema": "Formale Sprachen & Mengenlehre"
  },
  {
    "frage": "4. Welche Aussage zu Python-Sets ist korrekt?",
    "optionen": [
      "Sets sind immer geordnet.",
      "Sets erlauben doppelte Elemente.",
      "Sets unterstützen Mengenoperationen wie **Vereinigung** und Schnitt.",
      "Sets können als Schlüssel in Dictionaries verwendet werden."
    ],
    "loesung": 2,
    "erklaerung": "Sets sind ungeordnet, enthalten keine Duplikate und unterstützen Mengenoperationen wie **Vereinigung**/Schnitt.",
    "gewichtung": 1,
    "thema": "Formale Sprachen & Mengenlehre"
  },
  {
    "frage": "5. Welche der folgenden Aussagen beschreibt das Distributivgesetz der Mengen?",
    "optionen": [
      "$(A \\cup B) \\cap C = (A \\cap C) \\cup (B \\cap C)$",
      "$(A \\cap B) \\cup C = (A \\cup C) \\cap (B \\cup C)$",
      "$(A \\cup B) \\cup C = A \\cup (B \\cup C)$",
      "$(A \\cap B) \\cap C = A \\cap (B \\cap C)$"
    ],
    "loesung": 0,
    "erklaerung": "Das Distributivgesetz beschreibt, wie sich zwei Operationen zueinander verhalten. Hier verteilt sich die Vereinigung über die Schnittmenge: $(A \\cup B) \\cap C = (A \\cap C) \\cup (B \\cap C)$.",
    "extended_explanation": {
      "title": "Theoretischer Hintergrund: Distributivgesetze der Mengenlehre",
      "content": "In der Mengenlehre gibt es zwei Distributivgesetze, die die Interaktion von Vereinigung ($\\cup$) und Schnittmenge ($\\cap$) beschreiben:\n\n1. **Vereinigung über den Schnitt:** $A \\cup (B \\cap C) = (A \\cup B) \\cap (A \\cup C)$\n2. **Schnitt über die Vereinigung:** $A \\cap (B \\cup C) = (A \\cap B) \\cup (A \\cap C)$\n\nDiese Gesetze sind analog zu den Distributivgesetzen in der Arithmetik (z.B. $a \\cdot (b+c) = a \\cdot b + a \\cdot c$) und fundamental für die Vereinfachung von Mengenausdrücken."
    },
    "gewichtung": 2,
    "thema": "Mengenoperationen & Abbildungen"
  },
  {
    "frage": "6. Welche Eigenschaft kennzeichnet eine **injektive Abbildung**?",
    "optionen": [
      "Jedes Element im Zielbereich wird mindestens einmal getroffen.",
      "Verschiedene Elemente im Definitionsbereich werden auf verschiedene Elemente im Zielbereich abgebildet.",
      "Jedes Element im Zielbereich hat mehrere Urbilder.",
      "Jedes Element im Definitionsbereich hat kein Bild."
    ],
    "loesung": 1,
    "erklaerung": "Injektivität bedeutet: $x_1 \\neq x_2 \\Rightarrow f(x_1) \\neq f(x_2)$.",
    "extended_explanation": {
      "title": "Theoretischer Hintergrund: Injektivität, Surjektivität, Bijektivität",
      "content": "Abbildungen haben wichtige Eigenschaften:\n\n- **Injektiv (linkseindeutig):** Jedes Element der Zielmenge wird **höchstens einmal** getroffen. Verschiedene Elemente der Definitionsmenge haben immer verschiedene Bilder.\n- **Surjektiv (rechtstotal):** Jedes Element der Zielmenge wird **mindestens einmal** getroffen. Die Bildmenge ist gleich der Zielmenge.\n- **Bijektiv:** Die Abbildung ist sowohl injektiv als auch surjektiv. Jedes Element der Zielmenge wird **genau einmal** getroffen. Eine solche Abbildung ist umkehrbar."
    },
    "gewichtung": 2,
    "thema": "Mengenoperationen & Abbildungen"
  },
  {
    "frage": "7. Welche Aussage zur **Potenzmenge** ist korrekt?",
    "optionen": [
      "Sie enthält nur die leere Menge.",
      "Sie enthält alle Teilmengen einer Menge.",
      "Sie enthält nur die Menge selbst.",
      "Sie enthält nur eine Teilmenge."
    ],
    "loesung": 1,
    "erklaerung": "Die **Potenzmenge** P(A) ist die Menge aller Teilmengen von A.",
    "gewichtung": 1,
    "thema": "Mengenoperationen & Abbildungen"
  },
  {
    "frage": "8. Was beschreibt die **Differenzmenge** $A \\setminus B$?",
    "optionen": [
      "Alle Elemente, die in A und B sind.",
      "Alle Elemente, die nur in B sind.",
      "Alle Elemente, die nur in A sind.",
      "Alle Elemente aus A und B."
    ],
    "loesung": 2,
    "erklaerung": "$A \\setminus B$ enthält alle Elemente, die in A, aber nicht in B liegen.",
    "gewichtung": 1,
    "thema": "Mengenoperationen & Abbildungen"
  },
  {
    "frage": "9. Welche der folgenden logischen Operationen ist nicht kommutativ?",
    "optionen": [
      "UND ($\\land$)",
      "ODER ($\\lor$)",
      "**Implikation** ($\\to$)",
      "Äquivalenz ($\\leftrightarrow$)"
    ],
    "loesung": 2,
    "erklaerung": "Die **Implikation** ist nicht kommutativ: $A \\to B$ ist nicht äquivalent zu $B \\to A$.",
    "gewichtung": 1,
    "thema": "Aussagenlogik"
  },
  {
    "frage": "10. In welcher Situation ist die **Implikation** $A \\to B$ falsch?",
    "optionen": [
      "Wenn A falsch und B wahr ist.",
      "Wenn A wahr und B falsch ist.",
      "Wenn beide wahr sind.",
      "Wenn beide falsch sind."
    ],
    "loesung": 1,
    "erklaerung": "Eine **Implikation** ($A \\to B$) ist nur in dem einen Fall falsch, dass eine wahre Aussage zu einer falschen Aussage führt. In allen anderen Fällen gilt sie als wahr (Prinzip 'ex falso quodlibet' - aus Falschem folgt Beliebiges).",
    "extended_explanation": {
      "title": "Wahrheitstafel der Implikation",
      "content": "Die Wahrheitstafel für $A \\to B$ verdeutlicht dies:\n\n| A     | B     | $A \\to B$ |\n|-------|-------|------------|\n| wahr  | wahr  | **wahr**   |\n| wahr  | falsch| **falsch** |\n| falsch| wahr  | **wahr**   |\n| falsch| falsch| **wahr**   |\n\nDer einzige 'Bruch' des logischen Versprechens tritt in der zweiten Zeile auf."
    },
    "gewichtung": 2,
    "thema": "Aussagenlogik"
  },
  {
    "frage": "11. Welche der folgenden Aussagen ist eine **Kontradiktion**?",
    "optionen": [
      "$A \\lor B$",
      "$A \\land \\lnot A$",
      "$A \\lor \\lnot A$",
      "$A \\to B$"
    ],
    "loesung": 1,
    "erklaerung": "$A \\land \\lnot A$ ist immer falsch und damit eine **Kontradiktion**.",
    "gewichtung": 1,
    "thema": "Aussagenlogik"
  },
  {
    "frage": "12. Welche Operation entspricht logisch $\\lnot(A \\land B)$?",
    "optionen": [
      "$\\lnot A \\land \\lnot B$",
      "$\\lnot A \\lor \\lnot B$",
      "$A \\to \\lnot B$",
      "$B \\to \\lnot A$"
    ],
    "loesung": 1,
    "erklaerung": "Nach den **De Morgan'schen Gesetzen** wird die Negation einer Konjunktion (UND) zu einer Disjunktion (ODER) der negierten Teilaussagen: $\\lnot(A \\land B) \\equiv \\lnot A \\lor \\lnot B$.",
    "extended_explanation": {
      "title": "Theoretischer Hintergrund: De Morgan'sche Gesetze",
      "content": "Die De Morgan'schen Gesetze sind fundamentale Regeln der Aussagenlogik und Mengenlehre. Sie beschreiben, wie die Negation mit Konjunktion und Disjunktion interagiert:\n\n1. $\\lnot(A \\land B) \\equiv (\\lnot A \\lor \\lnot B)$  (Negation von UND wird zu ODER der Negationen)\n2. $\\lnot(A \\lor B) \\equiv (\\lnot A \\land \\lnot B)$  (Negation von ODER wird zu UND der Negationen)\n\nDiese Regeln sind essenziell für die Umformung und Vereinfachung logischer Ausdrücke."
    },
    "gewichtung": 2,
    "thema": "Aussagenlogik"
  },
  {
    "frage": "13. Welche Aussage ist logisch äquivalent zu $A \\to B$?",
    "optionen": [
      "$\\lnot A \\lor B$",
      "$A \\land B$",
      "$A \\lor B$",
      "$\\lnot B \\lor A$"
    ],
    "loesung": 0,
    "erklaerung": "Die **Implikation** $A \\to B$ ist äquivalent zu $\\lnot A \\lor B$.",
    "extended_explanation": {
      "title": "Herleitung der Äquivalenz",
      "content": "Eine Implikation $A \\to B$ ist nur dann falsch, wenn $A$ wahr und $B$ falsch ist. Betrachten wir die Wahrheitstafel für $\\lnot A \\lor B$:\n\n- Wenn $A$ wahr und $B$ wahr ist, ist $\\lnot A$ falsch, aber $B$ ist wahr $\\implies$ Ausdruck ist wahr.\n- Wenn $A$ wahr und $B$ falsch ist, ist $\\lnot A$ falsch und $B$ ist falsch $\\implies$ Ausdruck ist falsch.\n- Wenn $A$ falsch ist, ist $\\lnot A$ wahr, womit der gesamte Ausdruck $(\\lnot A \\lor B)$ immer wahr ist.\n\nDie Wahrheitstafeln sind identisch, daher sind die Ausdrücke äquivalent."
    },
    "gewichtung": 2,
    "thema": "Logische Äquivalenz & Prädikatenlogik"
  },
  {
    "frage": "14. Was beschreibt die **Prädikatenlogik** im Vergleich zur **Aussagenlogik** besser?",
    "optionen": [
      "Aussagen ohne Variablen",
      "Zusammenhänge zwischen Objekten und deren Eigenschaften",
      "Aussagen mit nur einer Variable",
      "Aussagen ohne Quantoren"
    ],
    "loesung": 1,
    "erklaerung": "**Prädikatenlogik** erlaubt Quantoren und Prädikate über Objekte/Eigenschaften.",
    "extended_explanation": {
      "title": "Abgrenzung: Aussagenlogik vs. Prädikatenlogik",
      "content": "Die **Aussagenlogik** behandelt ganze Sätze als atomare Einheiten (z.B. 'Es regnet'). Sie kann diese mit UND, ODER, NICHT etc. verknüpfen. \n\nDie **Prädikatenlogik** ist ausdrucksstärker. Sie kann die innere Struktur von Sätzen analysieren, indem sie:\n- **Prädikate** für Eigenschaften (z.B. `ist_rot(x)`)\n- **Variablen** für Objekte (z.B. `x`)\n- **Quantoren** ($\\forall$ 'für alle', $\\exists$ 'es existiert')\nverwendet. Dadurch kann sie Aussagen wie 'Alle Bälle sind rund' formalisieren."
    },
    "gewichtung": 2,
    "thema": "Logische Äquivalenz & Prädikatenlogik"
  },
  {
    "frage": "15. Welche Aussage ist ein Beispiel für den **Existenzquantor**?",
    "optionen": [
      "Für alle x gilt: $x > 0$",
      "Es existiert ein x mit $x < 5$",
      "Wenn $x > 3$, dann $x < 7$",
      "Kein x ist größer als 100"
    ],
    "loesung": 1,
    "erklaerung": "„Es existiert …“ ist der **Existenzquantor** $\\exists$.",
    "gewichtung": 1,
    "thema": "Logische Äquivalenz & Prädikatenlogik"
  },
  {
    "frage": "16. Welcher Ausdruck entspricht der **Kontraposition** von $A \\to B$?",
    "optionen": [
      "$\\lnot A \\to \\lnot B$",
      "$B \\to A$",
      "$\\lnot B \\to \\lnot A$",
      "$A \\land \\lnot B$"
    ],
    "loesung": 2,
    "erklaerung": "Die **Kontraposition** einer Implikation $A \\to B$ ist die logisch äquivalente Aussage $\\lnot B \\to \\lnot A$.",
    "extended_explanation": {
      "title": "Logische Äquivalenzen der Implikation",
      "content": "Für eine Implikation $A \\to B$ gibt es mehrere verwandte Aussagen:\n\n- **Umkehrung (Konverse):** $B \\to A$ (nicht äquivalent)\n- **Negation (Inverse):** $\\lnot A \\to \\lnot B$ (nicht äquivalent)\n- **Kontraposition:** $\\lnot B \\to \\lnot A$ (**äquivalent** zur ursprünglichen Aussage)\n\nDie Kontraposition ist ein wichtiges Werkzeug für indirekte Beweise."
    },
    "gewichtung": 2,
    "thema": "Logische Äquivalenz & Prädikatenlogik"
  },
  {
    "frage": "17. Welche Bedingung ist notwendig für eine korrekt definierte rekursive Funktion?",
    "optionen": [
      "Die Funktion ruft sich beliebig oft selbst auf.",
      "Es gibt einen **Basisfall**.",
      "Die Funktion benötigt keine Parameter.",
      "Die Funktion verwendet ausschließlich Iteration."
    ],
    "loesung": 1,
    "erklaerung": "Ein **Basisfall** garantiert Terminierung/Korrektheit.",
    "extended_explanation": {
      "title": "Aufbau einer rekursiven Funktion",
      "content": "Jede korrekte rekursive Funktion besteht aus zwei Teilen:\n\n1. **Basisfall (Abbruchbedingung):** Ein einfacher Fall, der direkt gelöst werden kann, ohne weiteren rekursiven Aufruf. Dies verhindert eine Endlosschleife.\n2. **Rekursionsschritt:** Der Fall, in dem die Funktion sich selbst mit einem 'kleineren' oder 'einfacheren' Problem aufruft. Das Problem muss sich bei jedem Schritt dem Basisfall annähern.\n\nFehlt der Basisfall, führt dies zu einem `Stack Overflow`-Fehler."
    },
    "gewichtung": 2,
    "thema": "Rekursion & Zahlensysteme"
  },
  {
    "frage": "18. Wie lautet die Zahl 13 im Binärsystem?",
    "optionen": [
      "1101",
      "1011",
      "1110",
      "1001"
    ],
    "loesung": 0,
    "erklaerung": "Um 13 ins Binärsystem umzuwandeln, sucht man die größten Zweierpotenzen: $13 = 8 + 4 + 1$. Das entspricht $1 \\cdot 2^3 + 1 \\cdot 2^2 + 0 \\cdot 2^1 + 1 \\cdot 2^0$, also $1101_2$.",
    "extended_explanation": {
      "title": "Umrechnung: Divisionsmethode mit Rest",
      "content": "Eine systematische Methode ist die wiederholte Division durch 2 und das Notieren der Reste:\n\n- $13 \\div 2 = 6$ Rest **1**\n- $6 \\div 2 = 3$ Rest **0**\n- $3 \\div 2 = 1$ Rest **1**\n- $1 \\div 2 = 0$ Rest **1**\n\nLiest man die Reste von unten nach oben, ergibt sich **1101**."
    },
    "gewichtung": 2,
    "thema": "Rekursion & Zahlensysteme"
  },
  {
    "frage": "19. Welche Aussage zur Rekursion trifft zu?",
    "optionen": [
      "Rekursion ist immer effizienter als Iteration.",
      "Jede rekursive Funktion benötigt einen **Abbruchfall**.",
      "Rekursive Funktionen speichern keinen Zustand.",
      "Rekursion vermeidet Stapelspeicher."
    ],
    "loesung": 1,
    "erklaerung": "Ohne Abbruch-/**Basisfall** kann die Rekursion nicht terminieren.",
    "gewichtung": 1,
    "thema": "Rekursion & Zahlensysteme"
  },
  {
    "frage": "20. Welche Zahlendarstellung verwendet 16 verschiedene Symbole?",
    "optionen": [
      "Dezimalsystem",
      "Oktalsystem",
      "Hexadezimalsystem",
      "Binärsystem"
    ],
    "loesung": 2,
    "erklaerung": "Hexadezimal nutzt 0–9 und A–F (insgesamt 16 Symbole).",
    "gewichtung": 1,
    "thema": "Rekursion & Zahlensysteme"
  },
  {
    "frage": "21. Was beschreibt das Prinzip der vollständigen Induktion?",
    "optionen": [
      "Ein Beweis für eine spezielle Zahl",
      "Ein Beweis für alle natürlichen Zahlen durch **Induktionsanfang** und Induktionsschritt",
      "Ein Beweis durch Widerspruch",
      "Ein Beweis für reelle Zahlen"
    ],
    "loesung": 1,
    "erklaerung": "Die vollständige Induktion ist eine Beweismethode für Aussagen über natürliche Zahlen. Sie besteht aus dem **Induktionsanfang** (Beweis für einen Startwert) und dem **Induktionsschritt** (Beweis, dass aus der Gültigkeit für $k$ die für $k+1$ folgt).",
    "extended_explanation": {
      "title": "Das Domino-Prinzip der Induktion",
      "content": "Man kann sich die vollständige Induktion wie eine Reihe von Dominosteinen vorstellen:\n\n1. **Induktionsanfang:** Man stößt den ersten Stein ($n_0$) um.\n2. **Induktionsschritt:** Man beweist, dass jeder fallende Stein ($k$) unweigerlich seinen Nachfolger ($k+1$) mitreißt.\n\nWenn beides gezeigt ist, weiß man, dass alle Steine ab dem ersten umfallen werden, also die Aussage für alle natürlichen Zahlen ab $n_0$ gilt."
    },
    "gewichtung": 2,
    "thema": "Natürliche Zahlen & vollständige Induktion"
  },
  {
    "frage": "22. Was versteht man unter dem **Induktionsanfang** bei der vollständigen Induktion?",
    "optionen": [
      "Der Beweis für $n = 1$ (oder Startwert)",
      "Der Beweis für alle n",
      "Der Beweis für $n = 0$ und $n = 1$",
      "Der Beweis für n beliebig"
    ],
    "loesung": 0,
    "erklaerung": "Der Startwert (z.B. $n=0$ oder $n=1$) wird als Basis für den Induktionsschritt bewiesen.",
    "gewichtung": 1,
    "thema": "Natürliche Zahlen & vollständige Induktion"
  },
  {
    "frage": "23. Welche Eigenschaft haben die natürlichen Zahlen?",
    "optionen": [
      "Sie enthalten negative Zahlen.",
      "Sie sind nicht geordnet.",
      "Sie sind abzählbar unendlich.",
      "Sie enthalten Brüche."
    ],
    "loesung": 2,
    "erklaerung": "Die Menge der natürlichen Zahlen $\\mathbb{N}$ ist abzählbar unendlich.",
    "gewichtung": 1,
    "thema": "Natürliche Zahlen & vollständige Induktion"
  },
  {
    "frage": "24. Was ist eine **rekursive Definition**?",
    "optionen": [
      "Eine Definition, die auf sich selbst Bezug nimmt.",
      "Eine Definition, die nur für $n = 1$ gilt.",
      "Eine Definition ohne Anfangswert.",
      "Eine Definition, die keine natürlichen Zahlen verwendet."
    ],
    "loesung": 0,
    "erklaerung": "Eine rekursive Definition (oder rekursive Funktion) definiert ein Objekt oder einen Prozess durch sich selbst, aber für einen einfacheren Fall. Sie benötigt immer einen Basisfall, um abzubrechen.",
    "extended_explanation": {
      "title": "Beispiel: Fakultät",
      "content": "Die Fakultät $n!$ kann rekursiv definiert werden:\n\n- **Basisfall:** $0! = 1$\n- **Rekursionsschritt:** $n! = n \\cdot (n-1)!$ für $n > 0$\n\nUm $4!$ zu berechnen, wird die Definition wiederholt angewendet, bis der Basisfall erreicht ist: $4! = 4 \\cdot 3! = 4 \\cdot 3 \\cdot 2! = 4 \\cdot 3 \\cdot 2 \\cdot 1! = 4 \\cdot 3 \\cdot 2 \\cdot 1 \\cdot 0! = 24$."
    },
    "gewichtung": 2,
    "thema": "Natürliche Zahlen & vollständige Induktion"
  },
  {
    "frage": "25. Welche der folgenden Zahlen ist keine **Primzahl**?",
    "optionen": [
      "2",
      "3",
      "4",
      "5"
    ],
    "loesung": 2,
    "erklaerung": "4 ist durch 2 teilbar und daher nicht prim.",
    "gewichtung": 1,
    "thema": "Ganze Zahlen, Teilbarkeit & Primzahlen"
  },
  {
    "frage": "26. Was bedeutet **Teilbarkeit**?",
    "optionen": [
      "Eine Zahl kann durch eine andere ohne Rest geteilt werden.",
      "Eine Zahl ist immer größer als die andere.",
      "Eine Zahl ist eine **Primzahl**.",
      "Eine Zahl ist negativ."
    ],
    "loesung": 0,
    "erklaerung": "$a$ ist durch $b$ teilbar, wenn $a = b \\cdot k$ mit ganzzahligem $k$ gilt.",
    "gewichtung": 1,
    "thema": "Ganze Zahlen, Teilbarkeit & Primzahlen"
  },
  {
    "frage": "27. Was ist der **größte gemeinsame Teiler** (**$\\gcd$**) von 12 und 18?",
    "optionen": [
      "2",
      "3",
      "6",
      "12"
    ],
    "loesung": 2,
    "erklaerung": "Die Teiler von 12 sind {1, 2, 3, 4, 6, 12}. Die Teiler von 18 sind {1, 2, 3, 6, 9, 18}. Der größte gemeinsame Teiler ist 6.",
    "extended_explanation": {
      "title": "Anwendung des Euklidischen Algorithmus",
      "content": "Für größere Zahlen ist der Euklidische Algorithmus effizienter:\n\n1. $18 = 1 \\cdot 12 + 6$\n2. $12 = 2 \\cdot 6 + 0$\n\nDer letzte von Null verschiedene Rest ist der größte gemeinsame Teiler, also **6**."
    },
    "gewichtung": 2,
    "thema": "Ganze Zahlen, Teilbarkeit & Primzahlen"
  },
  {
    "frage": "28. Welche Aussage zu ganzen Zahlen ist korrekt?",
    "optionen": [
      "Sie enthalten nur positive Zahlen.",
      "Sie enthalten positive, negative und die Null.",
      "Sie enthalten nur negative Zahlen.",
      "Sie enthalten Brüche."
    ],
    "loesung": 1,
    "erklaerung": "Die ganzen Zahlen $\\mathbb{Z}$ umfassen die natürlichen Zahlen, ihre negativen Entsprechungen und die Null: $\\{\\dots, -2, -1, 0, 1, 2, \\dots\\}$.",
    "gewichtung": 1,
    "thema": "Ganze Zahlen, Teilbarkeit & Primzahlen"
  },
  {
    "frage": "29. Welche Aussage beschreibt eine **Restklasse** modulo n?",
    "optionen": [
      "Die Menge aller Vielfachen von n",
      "Die Menge aller Zahlen mit gleichem Rest bei Division durch n",
      "Die Menge aller Primzahlen kleiner n",
      "Die Menge aller negativen Zahlen"
    ],
    "loesung": 1,
    "erklaerung": "Zahlen sind modulo n äquivalent, wenn sie denselben Divisionsrest haben.",
    "extended_explanation": {
      "title": "Beispiel: Restklassen modulo 3",
      "content": "Betrachten wir die Division durch 3. Jede ganze Zahl hat entweder den Rest 0, 1 oder 2. Dies führt zu drei Restklassen:\n\n- **Restklasse [0]:** {..., -6, -3, 0, 3, 6, ...} (alle durch 3 teilbaren Zahlen)\n- **Restklasse [1]:** {..., -5, -2, 1, 4, 7, ...} (alle Zahlen mit Rest 1)\n- **Restklasse [2]:** {..., -4, -1, 2, 5, 8, ...} (alle Zahlen mit Rest 2)\n\nDie Menge dieser Restklassen bildet den Restklassenring $\\mathbb{Z}_3$."
    },
    "gewichtung": 2,
    "thema": "Modulo-Arithmetik, Restklassen & Hash-Funktionen"
  },
  {
    "frage": "30. Was berechnet der **erweiterte Euklidische Algorithmus**?",
    "optionen": [
      "Nur den größten gemeinsamen Teiler",
      "Den **$\\gcd$** und die Koeffizienten für die Linearkombination",
      "Nur das kleinste gemeinsame Vielfache",
      "Nur Primzahlen"
    ],
    "loesung": 1,
    "erklaerung": "Der erweiterte Euklidische Algorithmus berechnet nicht nur den größten gemeinsamen Teiler (ggT) von zwei Zahlen $a$ und $b$, sondern auch zwei ganze Zahlen $s$ und $t$, sodass die Linearkombination $s \\cdot a + t \\cdot b = \\gcd(a,b)$ gilt.",
    "extended_explanation": {
      "title": "Anwendung: Multiplikatives Inverses",
      "content": "Diese Darstellung ist extrem nützlich in der Kryptographie. Wenn man das multiplikative Inverse von $a$ modulo $n$ sucht, muss man die Gleichung $a \\cdot x \\equiv 1 \\pmod n$ lösen. Wenn $\\gcd(a, n) = 1$ ist, liefert der erweiterte Euklidische Algorithmus $s$ und $t$ mit $s \\cdot a + t \\cdot n = 1$. Modulo $n$ gerechnet, fällt der Term $t \\cdot n$ weg und es bleibt $s \\cdot a \\equiv 1 \\pmod n$. Somit ist $s$ das gesuchte multiplikative Inverse."
    },
    "gewichtung": 3,
    "thema": "Modulo-Arithmetik, Restklassen & Hash-Funktionen"
  },
  {
    "frage": "31. Was ist eine **lineare Kongruenz**?",
    "optionen": [
      "Eine Gleichung der Form $ax \\equiv b \\pmod{n}$",
      "Eine Gleichung ohne Modulo",
      "Eine Gleichung mit nur einer Variablen",
      "Eine Gleichung mit nur positiven Zahlen"
    ],
    "loesung": 0,
    "erklaerung": "Eine lineare Kongruenz ist eine Gleichung der Form $ax \\equiv b \\pmod{n}$, bei der man eine ganze Zahl $x$ sucht, die die Gleichung erfüllt.",
    "extended_explanation": {
      "title": "Lösbarkeit einer linearen Kongruenz",
      "content": "Eine lineare Kongruenz $ax \\equiv b \\pmod{n}$ ist genau dann lösbar, wenn der größte gemeinsame Teiler von $a$ und $n$ (also $\\gcd(a, n)$) auch ein Teiler von $b$ ist.\n\n- **Beispiel (lösbar):** $6x \\equiv 4 \\pmod{10}$. Hier ist $\\gcd(6, 10) = 2$, und 2 teilt 4. Es gibt Lösungen (z.B. $x=4$, da $24 \\equiv 4 \\pmod{10}$).\n- **Beispiel (unlösbar):** $6x \\equiv 3 \\pmod{10}$. Hier ist $\\gcd(6, 10) = 2$, aber 2 teilt nicht 3. Es gibt keine ganzzahlige Lösung."
    },
    "gewichtung": 2,
    "thema": "Modulo-Arithmetik, Restklassen & Hash-Funktionen"
  },
  {
    "frage": "32. Wozu werden **Hash-Funktionen** in der Informatik verwendet?",
    "optionen": [
      "Zur Verschlüsselung von Nachrichten",
      "Zur schnellen Suche und Datenprüfung",
      "Zur Berechnung von Primzahlen",
      "Zur Darstellung von Brüchen"
    ],
    "loesung": 1,
    "erklaerung": "Hash-Funktionen bilden eine große Eingabemenge (z.B. beliebige Texte) auf eine kleine, feste Ausgabemenge (den Hash-Wert) ab. Dies wird für schnelle Datenstrukturen (Hash-Tabellen), zur Überprüfung der Datenintegrität (Prüfsummen) und in der Kryptographie genutzt.",
    "extended_explanation": {
      "title": "Eigenschaften einer guten Hash-Funktion",
      "content": "Eine gute Hash-Funktion sollte folgende Eigenschaften haben:\n\n- **Effizienz:** Der Hash-Wert muss schnell berechenbar sein.\n- **Deterministisch:** Die gleiche Eingabe muss immer den gleichen Hash-Wert erzeugen.\n- **Kollisionsresistenz:** Es sollte extrem schwierig sein, zwei verschiedene Eingaben zu finden, die denselben Hash-Wert erzeugen.\n- **Lawineneffekt:** Eine kleine Änderung in der Eingabe sollte zu einer großen, unvorhersehbaren Änderung im Hash-Wert führen."
    },
    "gewichtung": 2,
    "thema": "Modulo-Arithmetik, Restklassen & Hash-Funktionen"
  },
  {
    "frage": "33. Was unterscheidet einen **Ring** von einer Gruppe?",
    "optionen": [
      "Ein **Ring** hat zwei Verknüpfungen mit bestimmten Eigenschaften.",
      "Ein **Ring** ist immer kommutativ.",
      "Ein **Ring** hat kein neutrales Element.",
      "Ein **Ring** ist immer ein **Körper**."
    ],
    "loesung": 0,
    "erklaerung": "Eine **Gruppe** ist eine Menge mit einer Verknüpfung (z.B. Addition), die bestimmte Axiome erfüllt. Ein **Ring** ist eine reichhaltigere Struktur mit zwei Verknüpfungen (Addition und Multiplikation), die durch die Distributivgesetze miteinander verbunden sind.",
    "extended_explanation": {
      "title": "Hierarchie algebraischer Strukturen",
      "content": "Die Strukturen bauen aufeinander auf:\n\n- **Gruppe:** Eine Verknüpfung (z.B. $(\\mathbb{Z}, +)$).\n- **Ring:** Zwei Verknüpfungen, Addition und Multiplikation. Die Addition bildet eine abelsche Gruppe. (z.B. $(\\mathbb{Z}, +, \\cdot)$).\n- **Körper:** Ein kommutativer Ring, in dem zusätzlich jedes Element außer der Null ein multiplikatives Inverses hat. Dies ermöglicht die Division. (z.B. $(\\mathbb{Q}, +, \\cdot)$)."
    },
    "gewichtung": 2,
    "thema": "Gruppen, Ringe, Körper & Anwendungen"
  },
  {
    "frage": "34. Was ist ein **Körper** in der Algebra?",
    "optionen": [
      "Eine Struktur mit nur einer Verknüpfung",
      "Ein **Ring**, in dem jede von null verschiedene Zahl ein multiplikatives Inverses besitzt",
      "Eine Gruppe ohne neutrales Element",
      "Eine Menge ohne Struktur"
    ],
    "loesung": 1,
    "erklaerung": "Ein Körper ist eine algebraische Struktur, in der man wie gewohnt addieren, subtrahieren, multiplizieren und (außer durch Null) dividieren kann. Die rationalen Zahlen ($\\mathbb{Q}$) und die reellen Zahlen ($\\mathbb{R}$) sind die bekanntesten Beispiele.",
    "extended_explanation": {
      "title": "Körperaxiome (vereinfacht)",
      "content": "Ein Körper $(K, +, \\cdot)$ ist eine Menge $K$ mit zwei Verknüpfungen, sodass gilt:\n\n1. $(K, +)$ ist eine abelsche Gruppe (mit neutralem Element 0).\n2. $(K \\setminus \\{0\\}, \\cdot)$ ist eine abelsche Gruppe (mit neutralem Element 1).\n3. Es gelten die Distributivgesetze, die Addition und Multiplikation verbinden.\n\nDiese Axiome garantieren, dass die vier Grundrechenarten wie erwartet funktionieren."
    },
    "gewichtung": 2,
    "thema": "Gruppen, Ringe, Körper & Anwendungen"
  },
  {
    "frage": "35. Welches der folgenden Beispiele ist KEIN **Körper**?",
    "optionen": [
      "Die rationalen Zahlen",
      "Die reellen Zahlen",
      "Die ganzen Zahlen",
      "Die komplexen Zahlen"
    ],
    "loesung": 2,
    "erklaerung": "Die ganzen Zahlen $\\mathbb{Z}$ sind kein **Körper**, da nicht jedes von Null verschiedene Element ein multiplikatives Inverses in $\\mathbb{Z}$ hat (z.B. hat 2 kein Inverses in $\\mathbb{Z}$).",
    "gewichtung": 2,
    "thema": "Gruppen, Ringe, Körper & Anwendungen"
  },
  {
    "frage": "36. Wo werden endliche **Körper** in der Informatik angewendet?",
    "optionen": [
      "In der Bildkompression",
      "In der Fehlerkorrektur und Kryptographie",
      "In der Textverarbeitung",
      "In der Datenbankabfrage"
    ],
    "loesung": 1,
    "erklaerung": "Endliche Körper (auch Galois-Felder genannt) sind fundamental für die moderne digitale Kommunikation. Sie werden in fehlerkorrigierenden Codes (z.B. auf CDs, in QR-Codes) und in der Kryptographie (z.B. AES-Verschlüsselung, Elliptische-Kurven-Kryptographie) eingesetzt.",
    "extended_explanation": {
      "title": "Beispiel: $\\mathrm{GF}(2^8)$ in AES",
      "content": "Der Advanced Encryption Standard (AES) ist einer der weltweit am weitesten verbreiteten Verschlüsselungsalgorithmen. Seine Kernoperationen, wie die `SubBytes`- und `MixColumns`-Schritte, sind Berechnungen im endlichen Körper $\\mathrm{GF}(2^8)$. Dieser Körper besteht aus 256 Elementen, die als Polynome dargestellt werden. Die Arithmetik in diesem Körper verleiht AES seine hohe Sicherheit und Effizienz."
    },
    "gewichtung": 3,
    "thema": "Gruppen, Ringe, Körper & Anwendungen"
  },
  {
    "frage": "37. Was ist das Hauptprinzip des **RSA**-Verfahrens?",
    "optionen": [
      "Nutzung von Primzahlen und modularer Arithmetik",
      "Verwendung von **Hash-Funktionen**",
      "Einsatz von symmetrischen Schlüsseln",
      "Speicherung von Passwörtern im Klartext"
    ],
    "loesung": 0,
    "erklaerung": "Das RSA-Verfahren ist ein asymmetrisches Kryptosystem. Seine Sicherheit beruht darauf, dass es sehr einfach ist, zwei große Primzahlen zu multiplizieren, aber extrem rechenaufwendig, das Ergebnis (den öffentlichen Schlüssel) wieder in die ursprünglichen Primfaktoren (Teil des privaten Schlüssels) zu zerlegen.",
    "extended_explanation": {
      "title": "Schlüsselerzeugung bei RSA (vereinfacht)",
      "content": "1. Wähle zwei große, geheime Primzahlen $p$ und $q$.\n2. Berechne das Produkt $N = p \\cdot q$. Dieses $N$ ist Teil des öffentlichen Schlüssels.\n3. Wähle eine Zahl $e$ (öffentlicher Exponent).\n4. Berechne den privaten Exponenten $d$ so, dass $d \\cdot e \\equiv 1 \\pmod{(p-1)(q-1)}$.\n\n- **Verschlüsseln:** $C = M^e \\pmod N$\n- **Entschlüsseln:** $M = C^d \\pmod N$\n\nEin Angreifer kennt nur $N$ und $e$. Um $d$ zu finden, müsste er $N$ in $p$ und $q$ faktorisieren, was für große Zahlen praktisch unmöglich ist."
    },
    "gewichtung": 2,
    "thema": "Kryptografie & IT-Sicherheit"
  },
  {
    "frage": "38. Was ermöglicht der **Diffie-Hellman**-Schlüsselaustausch?",
    "optionen": [
      "Verschlüsselung von Nachrichten ohne Schlüssel",
      "Sicheren Austausch eines geheimen Schlüssels über einen unsicheren Kanal",
      "Speicherung von Passwörtern",
      "Kompression von Daten"
    ],
    "loesung": 1,
    "erklaerung": "Der Diffie-Hellman-Schlüsselaustausch ist ein Protokoll, das es zwei Parteien ermöglicht, über einen unsicheren (öffentlichen) Kanal einen gemeinsamen geheimen Schlüssel zu vereinbaren, ohne diesen Schlüssel jemals direkt auszutauschen.",
    "extended_explanation": {
      "title": "Funktionsweise (Analogie mit Farben)",
      "content": "1. Alice und Bob einigen sich öffentlich auf eine gemeinsame Farbe (z.B. Gelb).\n2. Alice wählt eine geheime Farbe (z.B. Rot), mischt sie mit Gelb und schickt das Ergebnis (Orange) an Bob.\n3. Bob wählt eine geheime Farbe (z.B. Blau), mischt sie mit Gelb und schickt das Ergebnis (Grün) an Alice.\n4. Alice mischt das erhaltene Grün mit ihrer geheimen Farbe Rot. Bob mischt das erhaltene Orange mit seiner geheimen Farbe Blau.\n\nBeide erhalten am Ende dieselbe finale, geheime Farbe (Braun), die ein Angreifer, der nur Gelb, Orange und Grün kennt, nicht einfach berechnen kann."
    },
    "gewichtung": 2,
    "thema": "Kryptografie & IT-Sicherheit"
  },
  {
    "frage": "39. Was ist ein Vorteil asymmetrischer **Kryptografie**?",
    "optionen": [
      "Sie ist schneller als symmetrische Verfahren.",
      "Es wird kein Schlüssel benötigt.",
      "Der öffentliche Schlüssel kann frei verteilt werden.",
      "Sie ist immer sicherer als symmetrische Verfahren."
    ],
    "loesung": 2,
    "erklaerung": "Der Public Key kann offen verteilt werden; der Private Key bleibt geheim.",
    "gewichtung": 2,
    "thema": "Kryptografie & IT-Sicherheit"
  },
  {
    "frage": "40. Welche Anwendung ist typisch für **Kryptografie** in der IT-Sicherheit?",
    "optionen": [
      "Datenkompression",
      "**Authentifizierung** und sichere Kommunikation",
      "Datenbankabfragen",
      "Grafische Darstellung"
    ],
    "loesung": 1,
    "erklaerung": "Kryptografie ist die Wissenschaft der Verschlüsselung und sicheren Kommunikation. Ihre Hauptziele sind Vertraulichkeit (Nachrichten sind nur für Befugte lesbar), Integrität (Nachrichten können nicht unbemerkt verändert werden) und Authentizität (die Identität der Kommunikationspartner ist gesichert).",
    "extended_explanation": {
      "title": "Anwendungsbeispiele",
      "content": "- **HTTPS:** Verschlüsselt die Kommunikation zwischen deinem Browser und Webseiten.\n- **E-Mail-Verschlüsselung (PGP/GPG):** Sichert den Inhalt von E-Mails.\n- **Digitale Signaturen:** Garantieren die Authentizität und Integrität von Dokumenten.\n- **Festplattenverschlüsselung (BitLocker/FileVault):** Schützt Daten bei Verlust des Geräts."
    },
    "gewichtung": 2,
    "thema": "Kryptografie & IT-Sicherheit"
  }
]