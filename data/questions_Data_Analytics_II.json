{
  "meta": {
    "title": "Data Analytics",
    "target_audience": "Fortgeschrittene",
    "question_count": 30,
    "difficulty_profile": {
      "leicht": 5,
      "mittel": 15,
      "schwer": 10
    },
    "time_per_weight_minutes": {
      "1": 0.5,
      "2": 0.75,
      "3": 1.0
    },
    "additional_buffer_minutes": 5,
    "test_duration_minutes": 30
  },
  "questions": [
    {
      "frage": "1. Welche Aussage beschreibt **Bias-Variance-Trade-off** im Kontext von $ML$ am treffendsten?",
      "optionen": [
        "Hoher Bias und hohe Varianz führen stets zu guter Generalisierung.",
        "Niedriger Bias und niedrige Varianz sind bei realen Daten leicht zu erreichen.",
        "Ein Modell mit hohem Bias ist tendenziell **unterfittet**, eines mit hoher Varianz tendenziell **überfittet**.",
        "Bias und Varianz sind unabhängig voneinander und beeinflussen die Generalisierung nicht.",
        "Hohe Varianz ist in der Praxis immer besser als hoher Bias."
      ],
      "loesung": 2,
      "erklaerung": "**Bias** misst die systematische Abweichung (Unteranpassung), **Varianz** die Empfindlichkeit gegenüber Datenfluktuation (Überanpassung). Gute Generalisierung erfordert ein ausgewogenes Verhältnis.",
      "gewichtung": 1,
      "thema": "Modellgüte & Generalisierung"
    },
    {
      "frage": "2. Welche Maßnahme reduziert **Data Leakage** in einem klassischen Analytics-Workflow am zuverlässigsten?",
      "optionen": [
        "Die gesamte Vorverarbeitung auf dem vollständigen Datensatz durchführen.",
        "Die Vorverarbeitung strikt innerhalb von Cross-Validation-Folds fitten und anwenden.",
        "Vorverarbeitung nur auf dem Testset fitten und auf das Train-Set anwenden.",
        "Keine Vorverarbeitung durchführen, um keine Informationen zu leaken.",
        "Feature-Engineering ausschließlich nach der Modellbewertung durchführen."
      ],
      "loesung": 1,
      "erklaerung": "**Leckagen** entstehen, wenn Informationen aus dem Testset in den Trainingsprozess einfließen. Daher müssen Transformationen wie `StandardScaler` innerhalb der Folds gelernt (fit) und angewendet (transform) werden.",
      "gewichtung": 2,
      "thema": "Validierung & Leakage",
      "extended_explanation": {
        "titel": "Leckagen durch saubere Pipeline-Scopes vermeiden",
        "schritte": [
          "**Fit** von Transformationen (z. B. `StandardScaler`) nur auf Train-Folds, **Transform** auf Train- und Val-Fold separat.",
          "Nutzung von `Pipeline`/`ColumnTransformer` stellt konsistente Reihenfolge und Scope sicher.",
          "Finales Refitting ausschließlich auf dem kompletten Trainingssplit; Testset bleibt unangetastet."
        ]
      },
      "mini_glossary": {
        "Cross-Validation": "Aufteilung der Trainingsdaten in mehrere Folds; jeder Fold dient einmal als Validierung. Reduziert Varianz der Schätzung.",
        "Data Leakage": "Unbeabsichtigter Informationsfluss von Test- auf Trainingsprozess (z. B. durch gemeinsames Fitten von Scaler), führt zu zu optimistischen Ergebnissen."
      }
    },
    {
      "frage": "3. Wofür wird **`StandardScaler`** in `scikit-learn` primär eingesetzt?",
      "optionen": [
        "Zum One-Hot-Encoding kategorialer Variablen.",
        "Zur Zentrierung auf Mittelwert 0 und Skalierung auf Standardabweichung 1.",
        "Zur Reduktion der Dimensionalität auf zwei Hauptkomponenten.",
        "Zur Erzeugung künstlicher Datenpunkte für Data Augmentation.",
        "Zur Binarisierung kontinuierlicher Ziele."
      ],
      "loesung": 1,
      "erklaerung": "`StandardScaler` transformiert numerische Features auf Mittelwert 0 und Standardabweichung 1, was distanz- und gradientenbasierte Verfahren stabiler macht.\"",
      "gewichtung": 1,
      "thema": "Feature-Scaling"
    },
    {
      "frage": "4. Welche Kennzahl ist für **binäre Klassifikation** am robustesten bei **unausgeglichenen Klassen**?",
      "optionen": [
        "`Accuracy`",
        "`ROC-AUC`",
        "`MSE`",
        "`Explained Variance`",
        "`R^2`"
      ],
      "loesung": 1,
      "erklaerung": "Bei stark unbalancierten Klassen kann `Accuracy` täuschen. `ROC-AUC` misst die Ranking-Qualität über Schwellen und ist robuster gegenüber Imbalance.\"",
      "gewichtung": 2,
      "thema": "Metriken & Bewertung",
      "extended_explanation": {
        "titel": "Warum `ROC-AUC` bei Imbalance oft sinnvoller ist",
        "schritte": [
          "`ROC-AUC` berücksichtigt die Sensitivität und 1−Spezifität über alle Schwellen.",
          "Damit wird die **Ranking-Fähigkeit** bewertet statt eine feste Schwelle.",
          "Für extrem unausgeglichene Probleme ist `PR-AUC` oft zusätzlich aussagekräftig."
        ]
      },
      "mini_glossary": {
        "ROC-AUC": "Fläche unter der Receiver-Operating-Characteristic-Kurve; misst die Trennschärfe unabhängig von einer Schwelle.",
        "PR-AUC": "Fläche unter Precision-Recall-Kurve; besonders informativ bei starker Klassenimbalance."
      }
    },
    {
      "frage": "5. Welche Vorteil bringt die Verwendung von **`Pipeline`** in `scikit-learn`?",
      "optionen": [
        "Modelle werden automatisch parallelisiert.",
        "Alle Schritte (Preprocessing bis Modell) sind reproduzierbar und leackage-sicher integrierbar.",
        "Hyperparameter müssen nicht mehr abgestimmt werden.",
        "Cross-Validation ist nicht mehr nötig.",
        "Feature-Selection wird obsolet."
      ],
      "loesung": 1,
      "erklaerung": "`Pipeline` bündelt Vorverarbeitung und Modell zu einem Ablauf, der konsistent trainiert und validiert wird—wichtig gegen **Data Leakage** und für Reproduzierbarkeit.\"",
      "gewichtung": 1,
      "thema": "Pipelines & Reproduzierbarkeit"
    },
    {
      "frage": "6. Welche Technik ist **keine** typische Komponente der **Exploratory Data Analysis (EDA)**?",
      "optionen": [
        "Univariate und bivariate Visualisierungen (z. B. Histogramme, Scatterplots).",
        "Berechnung von Lage- und Streuungsmaßen.",
        "Hyperparameter-Tuning eines Modells.",
        "Identifikation von Ausreißern.",
        "Korrelationsanalyse numerischer Variablen."
      ],
      "loesung": 2,
      "erklaerung": "**EDA** dient Verständnis und Datenqualitätsprüfung; Hyperparameter-Tuning gehört zur Modellierungsphase, nicht zur reinen Exploration.",
      "gewichtung": 2,
      "thema": "EDA",
      "extended_explanation": {
        "titel": "Grenze zwischen Exploration und Modellierung",
        "schritte": [
          "EDA beantwortet „Was liegt vor?“: Struktur, Qualität, Verteilungen, Zusammenhänge.",
          "Tuning optimiert Modellhyperparameter und setzt ein trainierbares Setup voraus.",
          "Saubere Trennung verhindert voreilige Schlussfolgerungen und Leakage."
        ]
      },
      "mini_glossary": {
        "EDA": "Explorative Analysephase zur Hypothesengenerierung und Datenprüfung.",
        "Hyperparameter-Tuning": "Systematische Suche (z. B. `GridSearchCV`) nach nicht-gelernten Steuerparametern eines Modells."
      }
    },
    {
      "frage": "7. Welche Maßnahme verbessert die **Robustheit gegenüber Ausreißern** in linearen Modellen am ehesten?",
      "optionen": [
        "Verwendung von `HuberRegressor` statt `LinearRegression`.",
        "Stärkere $L_2$-Regularisierung (`Ridge`).",
        "Vergrößerung der Lernrate.",
        "Standardisierung der Zielvariablen.",
        "Verzicht auf Bias-Term."
      ],
      "loesung": 0,
      "erklaerung": "Der `HuberRegressor` nutzt einen robusten Verlust, der Ausreißer weniger stark gewichtet als das quadratische Fehlermaß der klassischen `LinearRegression`.\"",
      "gewichtung": 2,
      "thema": "Robustheit & Ausreißer",
      "extended_explanation": {
        "titel": "Robuster Verlust statt quadratischem Fehler",
        "schritte": [
          "Quadratischer Loss bestraft große Residuen stark → Ausreißer dominieren.",
          "Huber-Loss wechselt ab einem Schwellwert in eine lineare Penalisierung.",
          "Ergebnis: stabilere Schätzungen und geringere Sensitivität."
        ]
      },
      "mini_glossary": {
        "Huber-Loss": "Stückweise quadratischer/linearer Verlust; kombiniert Robustheit und Effizienz.",
        "Ridge ($L_2$)": "Quadratische Regularisierung; reduziert Varianz, aber nicht speziell Ausreißerempfindlichkeit."
      }
    },
    {
      "frage": "8. Welche Aussage trifft **am ehesten** auf **`PCA`** zu?",
      "optionen": [
        "`PCA` maximiert die Klassengenauigkeit.",
        "`PCA` ist eine überwachte Methode zur Feature-Selektion.",
        "`PCA` projiziert auf orthogonale Richtungen maximaler Varianz.",
        "`PCA` ist nur für binäre Ziele geeignet.",
        "`PCA` ersetzt immer Feature-Engineering."
      ],
      "loesung": 2,
      "erklaerung": "`PCA` ist **unüberwacht** und findet orthogonale Komponenten, die maximale Varianz erklären; sie dient der **Dimensionsreduktion** und Visualisierung.\"",
      "gewichtung": 2,
      "thema": "Dimensionsreduktion",
      "extended_explanation": {
        "titel": "Varianzorientierte Projektion",
        "schritte": [
          "Kovarianzmatrix zerlegen und Eigenvektoren als Achsen verwenden.",
          "Höchste Eigenwerte → Komponenten mit größter erklärter Varianz.",
          "Reduktion kann Rauschen verringern und Modelle stabilisieren."
        ]
      },
      "mini_glossary": {
        "Erklärte Varianz": "Anteil der Gesamtvarianz, den eine Komponente abdeckt.",
        "Eigenvektor/-wert": "Richtungen und zugehörige Varianzstärken der Kovarianzmatrix."
      }
    },
    {
      "frage": "9. Warum ist **Feature-Scaling** für `KNN` besonders wichtig?",
      "optionen": [
        "Weil `KNN` keine Distanzmaße verwendet.",
        "Weil `KNN` auf Distanzvergleichen basiert und Skalenunterschiede verzerren.",
        "Weil `KNN` sonst keine kategorialen Variablen verarbeitet.",
        "Weil `KNN` nur mit normalverteilten Merkmalen funktioniert.",
        "Weil `KNN` sonst die Nachbarn zufällig wählt."
      ],
      "loesung": 1,
      "erklaerung": "`KNN` nutzt Distanzen; Features mit größeren Skalen dominieren sonst die Nachbarschaftssuche, weshalb **Standardisierung/Normalisierung** nötig ist.\"",
      "gewichtung": 1,
      "thema": "KNN & Skalierung"
    },
    {
      "frage": "10. Welche Praxis ist bei **Class Imbalance** für die **Schwellenwahl** sinnvoll?",
      "optionen": [
        "Immer bei Schwelle 0.5 bleiben.",
        "Schwellenwahl per Youden-Index oder Kostenmatrix anhand `ROC`/`PR`-Kurven.",
        "Schwelle so verschieben, dass `Accuracy` maximal wird.",
        "Schwellen zufällig sampeln und mitteln.",
        "Schwellenwahl ignorieren; sie beeinflusst Metriken nicht."
      ],
      "loesung": 1,
      "erklaerung": "Bei unausgeglichenen Klassen optimiert eine feste Schwelle selten die gewünschten **Kosten/Nutzen**. Kurvenbasierte Verfahren erlauben zielabhängige Auswahl.\"",
      "gewichtung": 2,
      "thema": "Klassifikation & Schwellen",
      "extended_explanation": {
        "titel": "Schwellen daten- und zielabhängig bestimmen",
        "schritte": [
          "`ROC`/`PR`-Kurven über alle Schwellen erzeugen.",
          "Youden-Index oder kostenbasierte Optimierung auf Geschäftsziele abstimmen.",
          "Schwelle regelmäßig rekalibrieren, wenn Daten-Drift vorliegt."
        ]
      },
      "mini_glossary": {
        "Youden-Index": "Maximiert Sensitivität + Spezifität − 1; liefert eine Schwellenempfehlung.",
        "Daten-Drift": "Änderung der Verteilung über die Zeit; erfordert Nachkalibrierung."
      }
    },
    {
      "frage": "11. Welche Methode ist **keine** gängige Strategie zur **Feature-Selektion**?",
      "optionen": [
        "Filtermethoden (z. B. Korrelation, Mutual Information).",
        "Wrappermethoden (z. B. rekursives Weglassen).",
        "Embedded-Methoden (z. B. `Lasso`).",
        "Zufälliges Entfernen von Features ohne Bewertung.",
        "Stabilitätsselektion über resampelte Daten."
      ],
      "loesung": 3,
      "erklaerung": "**Randomes Entfernen** ohne Bewertung ist keine systematische Methode; etablierte Ansätze nutzen statistische Kriterien oder modellinduzierte Gewichte.",
      "gewichtung": 2,
      "thema": "Feature-Selektion",
      "extended_explanation": {
        "titel": "Selektion erfordert Kriterium oder Modellkopplung",
        "schritte": [
          "Filter stützen sich auf datengetriebene Maße (z. B. Korrelation).",
          "Wrapper bewerten Feature-Sets über wiederholtes Train/Val.",
          "Embedded nutzen Regularisierung/Gewichte im Modell (z. B. `L1`)."
        ]
      },
      "mini_glossary": {
        "Lasso (`L1`)": "Sparsame Regularisierung; kann Koeffizienten exakt auf 0 setzen.",
        "Stabilitätsselektion": "Wählt Features, die über Resamples hinweg konsistent wichtig sind."
      }
    },
    {
      "frage": "12. Welche Aussage trifft auf **`StratifiedKFold`** am besten zu?",
      "optionen": [
        "Teilt Daten zufällig ohne Rücksicht auf die Zielverteilung.",
        "Erhält die Klassenverteilung in jedem Fold näherungsweise bei.",
        "Ist nur für Regression geeignet.",
        "Verwendet deterministisch immer dieselben Splits ohne Seed.",
        "Erfordert, dass alle Features bereits skaliert sind."
      ],
      "loesung": 1,
      "erklaerung": "`StratifiedKFold` sorgt dafür, dass die **Klassenverteilung** in jedem Fold ähnlich der Gesamtheit ist—wichtig bei Imbalance.\"",
      "gewichtung": 1,
      "thema": "Cross-Validation"
    },
    {
      "frage": "13. Welche Aussage zur **Kalibrierung** von Klassifikationsmodellen ist korrekt?",
      "optionen": [
        "Kalibrierung verändert die Rangfolge der Scores nicht.",
        "Kalibrierung maximiert zwangsläufig `Accuracy`.",
        "Kalibrierung ist bei logistischen Modellen nicht nötig.",
        "Kalibrierung ist identisch mit Regularisierung.",
        "Kalibrierung ersetzt die Schwellenwahl."
      ],
      "loesung": 0,
      "erklaerung": "Methoden wie **Platt Scaling** oder **Isotonic Regression** justieren **Wahrscheinlichkeiten**, nicht das Ranking; `ROC-AUC` bleibt oft unverändert, `Brier`/`LogLoss` verbessern sich.\"",
      "gewichtung": 2,
      "thema": "Kalibrierung",
      "extended_explanation": {
        "titel": "Wahrscheinlichkeiten auf reale Häufigkeiten abbilden",
        "schritte": [
          "Auf Val-Daten wird ein Kalibrierungsmodell auf Scores gefittet.",
          "Output sind besser kalibrierte Wahrscheinlichkeiten (z. B. 0.7 ≈ 70 %).",
          "Nützlich für kostenbasierte Entscheidungen und Risikoabschätzungen."
        ]
      },
      "mini_glossary": {
        "Platt Scaling": "Sigmoid-Modell auf Scores; mappt zu Wahrscheinlichkeiten.",
        "Isotone Regression": "Monotone, nichtlineare Anpassung der Score→Proba-Abbildung."
      }
    },
    {
      "frage": "14. Welche Option beschreibt **`TimeSeriesSplit`** richtig?",
      "optionen": [
        "Verwendet zufällige Splits ohne Zeitordnung.",
        "Erweitert den Trainingszeitraum schrittweise und validiert auf nachfolgenden Zeitfenstern.",
        "Ist nur für stationäre Reihen nutzbar.",
        "Mischt die Beobachtungen vor jedem Split.",
        "Benötigt immer Tagesdaten."
      ],
      "loesung": 1,
      "erklaerung": "`TimeSeriesSplit` respektiert **Zeitkausalität**: Train auf Vergangenheit, Val auf Zukunft—verhindert **Look-ahead Leakage**.\"",
      "gewichtung": 2,
      "thema": "Zeitreihen-Validierung",
      "extended_explanation": {
        "titel": "Kausal korrekte Validierung für Zeitreihen",
        "schritte": [
          "Splits wachsen kumulativ im Training und schieben das Val-Fenster vor.",
          "Keine Durchmischung über die Zeit; Ordnung bleibt erhalten.",
          "Geeignet für Prognosen, Drift-Erkennung und Modellwahl."
        ]
      },
      "mini_glossary": {
        "Look-ahead Leakage": "Zukünftige Informationen beeinflussen Training; führt zu zu guten Schätzungen.",
        "Drift": "Systematische Verschiebung der Datenverteilung über die Zeit."
      }
    },
    {
      "frage": "15. Was ist der **Hauptzweck** von **`MLflow Tracking`** im Analytics-Stack?",
      "optionen": [
        "Training von neuronalen Netzen auf GPU.",
        "Nachverfolgung von Parametern, Metriken, Artefakten und Modellen je Experiment.",
        "Automatisches Generieren perfekter Hyperparameter.",
        "Berechnung von Shapley-Werten.",
        "Deployment in Kubernetes ohne weitere Tools."
      ],
      "loesung": 1,
      "erklaerung": "`MLflow Tracking` protokolliert **Parameter, Metriken, Artefakte und Modelldateien** und erleichtert Vergleich und Reproduzierbarkeit.\"",
      "gewichtung": 2,
      "thema": "MLOps & Tracking",
      "extended_explanation": {
        "titel": "Warum strukturierte Experiment-Historie entscheidend ist",
        "schritte": [
          "Konsistente Runs mit identischen Seeds und Umgebungen protokollieren.",
          "Artefakte (Plots, Modelle) zentral ablegen und vergleichen.",
          "Reproduzierbare Entscheidungen durch nachvollziehbare Historie ermöglichen."
        ]
      },
      "mini_glossary": {
        "Artefakt": "Begleitobjekt eines Runs (z. B. Figure, Confusion Matrix, Modell).",
        "Run": "Einzelner Trainings-/Evaluationsdurchlauf mit Logeinträgen in `MLflow`."
      }
    },
    {
      "frage": "16. Welche Aussage beschreibt **Regularisierung** korrekt?",
      "optionen": [
        "`L1` erhöht Varianz, `L2` erhöht Bias.",
        "`L1` kann Koeffizienten exakt nullen, `L2` schrumpft kontinuierlich.",
        "`L2` führt stets zu sparsamen, exakt Null-Koeffizienten.",
        "Regularisierung ist nur bei Deep Learning sinnvoll.",
        "Regularisierung ersetzt Datenqualität."
      ],
      "loesung": 1,
      "erklaerung": "`L1` (Lasso) induziert **Sparsamkeit** durch Nullsetzen, `L2` (Ridge) glättet und reduziert Varianz ohne harte Nullung.\"",
      "gewichtung": 2,
      "thema": "Regularisierung",
      "extended_explanation": {
        "titel": "Bias–Varianz gezielt beeinflussen",
        "schritte": [
          "`L1` fördert Feature-Selektion durch koeffiziente Nullung.",
          "`L2` verteilt Gewichte und stabilisiert Vorhersagen.",
          "Kombination (`Elastic Net`) vereint Vorteile beider Welten."
        ]
      },
      "mini_glossary": {
        "Elastic Net": "Kombiniert `L1` und `L2`; kontrolliert Sparsamkeit und Glättung.",
        "Sparsamkeit": "Viele Koeffizienten exakt 0; vereinfacht das Modell."
      }
    },
    {
      "frage": "17. Welche **Docker**-Praxis unterstützt **Reproduzierbarkeit** in Analytics-Projekten am stärksten?",
      "optionen": [
        "Installationen direkt auf dem Host ohne Versionsangaben.",
        "Nutzung eines versionierten `Dockerfile` plus `requirements.txt`/`environment.yml`.",
        "Nur ein Readme mit Setup-Hinweisen verwenden.",
        "Abhängigkeiten zur Laufzeit zufällig aktualisieren.",
        "Container ohne feste Basisimages starten."
      ],
      "loesung": 1,
      "erklaerung": "Ein **fixiertes** `Dockerfile` mit **versionierten** Abhängigkeiten erzeugt portable, reproduzierbare Umgebungen über Systeme hinweg.\"",
      "gewichtung": 2,
      "thema": "Reproduzierbarkeit & Infrastruktur",
      "extended_explanation": {
        "titel": "Umgebung einfrieren – Ergebnisse stabil halten",
        "schritte": [
          "Basisimage und Paketversionen explizit deklarieren.",
          "Build-Caching durch frühes Kopieren der Anforderungen nutzen.",
          "Identische Images über Dev/CI/Prod ausrollen."
        ]
      },
      "mini_glossary": {
        "Image": "Schreibgeschützte Vorlage eines Containers mit allen Abhängigkeiten.",
        "Container": "Laufende Instanz eines Images mit isolierter Umgebung."
      }
    },
    {
      "frage": "18. Welche Aussage beschreibt **`RandomForest`** gegenüber einem einzelnen **Decision Tree** am besten?",
      "optionen": [
        "`RandomForest` erhöht systematisch Overfitting.",
        "`RandomForest` reduziert Varianz durch Bagging vieler Bäume.",
        "`RandomForest` braucht zwingend weniger Daten.",
        "`RandomForest` ist deterministisch ohne Zufallseinfluss.",
        "`RandomForest` eignet sich nicht für Klassifikation."
      ],
      "loesung": 1,
      "erklaerung": "Durch **Bagging** (Bootstrapping + Merkmalssampling) mittelt der Wald über viele Bäume und reduziert so **Varianz** und Overfitting-Tendenzen einzelner Bäume.\"",
      "gewichtung": 2,
      "thema": "Ensembles",
      "extended_explanation": {
        "titel": "Varianzreduktion durch Diversität",
        "schritte": [
          "Bootstraps und zufällige Feature-Subsets erzeugen diverse Bäume.",
          "Aggregation (Mehrheit/Mittel) glättet Einzelschätzungen.",
          "Resultat: stabilere Performance und höhere Robustheit."
        ]
      },
      "mini_glossary": {
        "Bagging": "Parallel trainierte Modelle auf Bootstraps; Aggregation der Vorhersagen.",
        "Feature-Sampling": "Zufällige Auswahl von Merkmalen pro Split zur Entkorrelation."
      }
    },
    {
      "frage": "19. Welche Metrik eignet sich **besonders** zur Bewertung einer **Regression**?",
      "optionen": [
        "`F1-Score`",
        "`MSE`",
        "`Recall`",
        "`ROC-AUC`",
        "`Accuracy`"
      ],
      "loesung": 1,
      "erklaerung": "In Regressionsaufgaben sind Fehlermaße wie **`MSE`** oder `MAE` üblich; Klassifikationsmetriken wie `F1`, `Accuracy`, `ROC-AUC` sind ungeeignet.\"",
      "gewichtung": 1,
      "thema": "Metriken – Regression"
    },
    {
      "frage": "20. Welche Maßnahme ist zur **Erklärung** von Modellentscheidungen in tabellarischen Daten **am praktikabelsten**?",
      "optionen": [
        "`LIME` oder `SHAP` zur lokalen/ globalen Feature-Beitragsanalyse.",
        "Nur die Koeffizienten eines Ridge-Modells betrachten.",
        "Gewichte eines `RandomForest` ignorieren, da sie uninterpretierbar sind.",
        "Stets nur Korrelationsmatrix zeigen.",
        "Feature-Skalierung abschalten, um Interpretierbarkeit zu erhöhen."
      ],
      "loesung": 0,
      "erklaerung": "**`LIME`/`SHAP`** liefern **lokale** und **globale** Beiträge von Features—geeignet für komplexe Modelle und Audit-Zwecke.",
      "gewichtung": 3,
      "thema": "Explainable AI",
      "extended_explanation": {
        "titel": "Lokale Erklärungen für individuelle Vorhersagen",
        "schritte": [
          "`LIME` approximiert lokal ein einfaches Modell um eine Vorhersage.",
          "`SHAP` nutzt Shapley-Werte aus der Spieltheorie für konsistente Beiträge.",
          "Kombination erlaubt Debugging, Kommunikation und Governance."
        ]
      },
      "mini_glossary": {
        "SHAP": "Shapley Additive Explanations; additiv zerlegbare Feature-Beiträge.",
        "LIME": "Local Interpretable Model-agnostic Explanations; lokale Linearisierung."
      }
    },
    {
      "frage": "21. Welche Praxis ist bei **SQL-Analysen** für Kennzahlenbildung korrekt?",
      "optionen": [
        "Kennzahlen direkt aus Roh-Events ohne Aggregation berichten.",
        "Window-Functions verwenden, um rollierende Metriken zu berechnen.",
        "Nur `GROUP BY` reicht immer für Kohortenanalysen.",
        "`JOIN`s vermeiden, um Performance zu sichern.",
        "Zeitstempel in Text konvertieren, um Zonenprobleme zu umgehen."
      ],
      "loesung": 1,
      "erklaerung": "**Window-Functions** (`OVER`-Klausel) erlauben **rollierende**, **kumulative** und rangbasierte Auswertungen ohne Informationsverlust durch Aggregation.",
      "gewichtung": 2,
      "thema": "SQL für Analytics",
      "extended_explanation": {
        "titel": "Zeitbezogene Metriken korrekt bilden",
        "schritte": [
          "Mit `PARTITION BY` und `ORDER BY` Kohorten/Zeitläufe definieren.",
          "Funktionen wie `SUM() OVER` oder `AVG() OVER` für rollierende Werte nutzen.",
          "So bleiben Zeilengranularität und Metrikbildung vereinbar."
        ]
      },
      "mini_glossary": {
        "Window Function": "Aggregation über ein gleitendes Fenster statt Gruppenverdichtung.",
        "`OVER`-Klausel": "Definiert Partition und Ordnung für Window-Berechnungen."
      }
    },
    {
      "frage": "22. Welche Option trifft auf **A/B-Tests** methodisch zu?",
      "optionen": [
        "Die Stichprobengröße kann nach ersten Ergebnissen beliebig angepasst werden.",
        "Vorab festgelegte **Power** und **Signifikanzniveau** bestimmen die benötigte Stichprobengröße.",
        "Der p-Wert gibt die Wahrscheinlichkeit der Nullhypothese an.",
        "Mehrfaches Zwischenstopp-Look erhöht nicht die Fehlerwahrscheinlichkeit.",
        "Kein Randomisieren nötig, wenn Gruppen ähnlich wirken."
      ],
      "loesung": 1,
      "erklaerung": "Testdesign verlangt **a priori** definierte **$\\u03b1$** (Signifikanz) und **Power** (1−$\\u03b2$). Daraus ergibt sich die notwendige **Sample Size**.\"",
      "gewichtung": 3,
      "thema": "Experimentdesign",
      "extended_explanation": {
        "titel": "Sauberes Testdesign vor Datensammlung",
        "schritte": [
          "Effektgröße, $α$ und Power festlegen → Stichprobengröße berechnen.",
          "Randomisieren und vorab Analyseplan fixieren (Pre-Registration).",
          "Zwischenanalysen nur mit Alpha-Spending/Group-Sequential-Design."
        ]
      },
      "mini_glossary": {
        "Power": "Wahrscheinlichkeit, einen echten Effekt zu entdecken (1−$β$).",
        "Signifikanzniveau ($α$)": "Fehlerrate 1. Art; üblicherweise 0.05."
      }
    },
    {
      "frage": "23. Welche Maßnahme verbessert **Reproduzierbarkeit** zusätzlich zu `Docker`?",
      "optionen": [
        "Seeds und Daten-Splits zufällig halten.",
        "`requirements.txt` ohne Versions-Pins verwenden.",
        "**Random-Seeds** setzen und **Daten-Splits** deterministisch speichern.",
        "Artefakte nicht versionieren.",
        "Notebook-Zellen beliebig neu ausführen."
      ],
      "loesung": 2,
      "erklaerung": "**Deterministische Seeds** und persistierte **Splits** sichern identische Bedingungen für Folgeruns—wichtig für Vergleichbarkeit.",
      "gewichtung": 1,
      "thema": "Reproduzierbarkeit – Praxis"
    },
    {
      "frage": "24. Wodurch unterscheidet sich **`GridSearchCV`** von **`RandomizedSearchCV`**?",
      "optionen": [
        "`GridSearchCV` wählt Parameter zufällig, `RandomizedSearchCV` durchsucht lückenlos.",
        "`GridSearchCV` durchsucht ein Gitter vollständig, `RandomizedSearchCV` sampelt zufällige Kombinationen.",
        "Beide liefern immer identische Ergebnisse.",
        "`RandomizedSearchCV` benötigt keine Cross-Validation.",
        "`GridSearchCV` ist grundsätzlich schneller."
      ],
      "loesung": 1,
      "erklaerung": "**Grid** prüft alle Gitterpunkte; **Randomized** sampelt und kann schneller gute Regionen finden—insbesondere bei großen Suchräumen.",
      "gewichtung": 2,
      "thema": "Hyperparameter-Tuning",
      "extended_explanation": {
        "titel": "Suchstrategien im Parameterraum",
        "schritte": [
          "Grid: Exhaustiv, aber teuer bei vielen Dimensionen.",
          "Randomized: Stochastisch, erkundet Breite effizienter.",
          "Praxis: Randomized → Feingrid um gute Regionen."
        ]
      },
      "mini_glossary": {
        "Suchraum": "Kartesisches Produkt aller Hyperparameterbereiche.",
        "Validierungsstrategie": "Art der Datenpartitionierung während der Suche (z. B. K-Fold)."
      }
    },
    {
      "frage": "25. Welche Strategie ist **zweckmäßig**, um **Ausreißer** **vor** dem Modelltraining zu behandeln?",
      "optionen": [
        "Immer alle Ausreißer entfernen.",
        "Winsorisierung oder robuste Transformationen prüfen und deren Effekt validieren.",
        "Ausreißer ignorieren; Modelle lernen das automatisch.",
        "Zielvariable clippen, Features unverändert lassen.",
        "Nur logarithmische Transformationen anwenden."
      ],
      "loesung": 1,
      "erklaerung": "**Ausreißer-Handling** ist kontextabhängig. Robuste Alternativen (Winsorize, Huber/Quantile-Transformer) sollten **validiert** statt dogmatisch angewandt werden.",
      "gewichtung": 2,
      "thema": "Datenqualität",
      "extended_explanation": {
        "titel": "Kontext und Validierung statt Dogma",
        "schritte": [
          "Ausreißer detektieren (z. B. IQR/robuste Z-Scores).",
          "Optionen wie Winsorisierung/robuste Scaler testen.",
          "Wirksamkeit per Cross-Validation und Domänenmetriken prüfen."
        ]
      },
      "mini_glossary": {
        "Winsorisierung": "Beschneidet Extremwerte auf Perzentilschwellen, statt sie zu verwerfen.",
        "IQR": "Interquartilsabstand $Q3-Q1$; robustes Streuungsmaß."
      }
    },
    {
      "frage": "26. Welche Eigenschaft zeichnet **`LogisticRegression`** in `scikit-learn` aus?",
      "optionen": [
        "Sie liefert kalibrierte Wahrscheinlichkeiten ohne weitere Maßnahmen.",
        "Sie kann mit `liblinear` oder `lbfgs` optimiert werden.",
        "Sie ist ein Regressionsmodell für kontinuierliche Ziele.",
        "Sie benötigt keine Regularisierung.",
        "Sie kann keine multiklassigen Probleme lösen."
      ],
      "loesung": 1,
      "erklaerung": "Die Implementierung unterstützt verschiedene **Solver** wie `liblinear`/`lbfgs`; Regularisierung ist standardmäßig aktiv (`C`).\"",
      "gewichtung": 1,
      "thema": "Klassifikation – Logistische Regression"
    },
    {
      "frage": "27. Welche Visualisierung eignet sich **direkt** zur Diagnose von **Klassifikationsfehlern**?",
      "optionen": [
        "Elbow-Plot der Clusteranzahl.",
        "Confusion-Matrix mit Normalisierung.",
        "Scree-Plot der PCA-Varianzanteile.",
        "Lag-Plot für Zeitreihen.",
        "QQ-Plot der Residuen."
      ],
      "loesung": 1,
      "erklaerung": "Eine **Confusion-Matrix** zeigt Fehlklassifikationen je Klasse, optional normalisiert—nützlich für zielgerichtete Fehleranalysen.\"",
      "gewichtung": 2,
      "thema": "Diagnostik",
      "extended_explanation": {
        "titel": "Fehlerstruktur sichtbar machen",
        "schritte": [
          "Matrix je Klasse: True/False Positives/Negatives.",
          "Normalisierung macht Imbalance vergleichbar.",
          "Ableiten gezielter Maßnahmen (Daten, Schwelle, Kosten)."
        ]
      },
      "mini_glossary": {
        "False Positive": "Fälschlich als positiv klassifiziert.",
        "False Negative": "Fälschlich als negativ klassifiziert."
      }
    },
    {
      "frage": "28. Welche Aussage zu **`Train/Test Split`** ist **richtig**?",
      "optionen": [
        "Testset darf für Hyperparameter-Suche verwendet werden.",
        "Train/Validation/Test trennen Rollen: Tuning auf Val, finale Schätzung auf Test.",
        "Testset muss immer größer als Trainset sein.",
        "Validierungsset ist unnötig bei Cross-Validation.",
        "Stratifizierung ist nur bei Regression relevant."
      ],
      "loesung": 1,
      "erklaerung": "**Rollen-Trennung**: Tuning erfolgt ohne Testwissen (Val/CV), die finale Leistung wird **einmalig** auf dem **Testset** geschätzt.",
      "gewichtung": 2,
      "thema": "Evaluationsdesign",
      "extended_explanation": {
        "titel": "Saubere Rollen für belastbare Schätzungen",
        "schritte": [
          "Entwicklung/Tuning ohne Testkontakt.",
          "Test nur für die Schlussmessung reservieren.",
          "Reproduzierbare Splits dokumentieren und versionieren."
        ]
      },
      "mini_glossary": {
        "Holdout": "Feste Aufteilung in Train/Val/Test.",
        "Leckage": "Informationsübertrag von Test in Training/Tuning."
      }
    },
    {
      "frage": "29. Welche Maßnahme verbessert die **Modellüberwachung** nach Deployment?",
      "optionen": [
        "Verzicht auf Logging zur Performance-Steigerung.",
        "Drift-Detektion, Re-Calibration und periodisches Re-Training nach SLAs.",
        "Ausschließlich manuelle Stichprobenprüfung ohne Metriken.",
        "Nur Hardware-Monitoring (CPU/RAM) betrachten.",
        "Feature-Statistiken nie speichern, um Speicherplatz zu sparen."
      ],
      "loesung": 1,
      "erklaerung": "**MLOps** verlangt Monitoring von **Daten-/Kontextdrift**, **Metriken** und **Re-Training**-Regeln, um Leistung stabil zu halten.",
      "gewichtung": 3,
      "thema": "MLOps – Betrieb",
      "extended_explanation": {
        "titel": "Kontinuierliche Qualitätssicherung im Betrieb",
        "schritte": [
          "Eingangsdaten und Predictions statistisch überwachen.",
          "Schwellen/SLAs definieren und Alerts etablieren.",
          "Re-Training/Neu-Kalibrierung bei Verletzungen anstoßen."
        ]
      },
      "mini_glossary": {
        "SLA": "Service Level Agreement; Zielwerte für Qualität/Verfügbarkeit.",
        "Drift-Detektion": "Statistische Verfahren zum Erkennen von Verteilungsänderungen."
      }
    },
    {
      "frage": "30. Welche Praxis ist bei **Feature-Encoding** für **Baumverfahren** sinnvoll?",
      "optionen": [
        "Kategoriale High-Cardinality-Features immer one-hot-encoden.",
        "Zyklische Features (z. B. Monat) stets als Integer lassen.",
        "Target-Encoding nur strikt CV-intern anwenden, um Leakage zu vermeiden.",
        "Numerische Features stets normalisieren.",
        "Label-Encoding ist immer besser als One-Hot."
      ],
      "loesung": 2,
      "erklaerung": "**Target-Encoding** kann starken Leakage verursachen; daher muss es **fold-intern** fit/transformiert werden. Bäume benötigen kein Scaling, aber Encoding muss leakage-sicher sein.",
      "gewichtung": 3,
      "thema": "Encoding & Leakage",
      "extended_explanation": {
        "titel": "Hochkardinale Kategorien ohne Leckagen encoden",
        "schritte": [
          "Target-Statistiken nur aus Trainingsfold berechnen.",
          "Auf Val/Test dieselben Regeln ohne Zielinformation anwenden.",
          "Regulierung (Smoothing) gegen Overfitting der Kategorien nutzen."
        ]
      },
      "mini_glossary": {
        "Target-Encoding": "Ersetzt Kategorie durch aggregierte Zielstatistik (z. B. Mittelwert).",
        "Smoothing": "Mischung aus Kategorie- und Global-Statistik zur Stabilisierung."
      }
    }
  ]
}
